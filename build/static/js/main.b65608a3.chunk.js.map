{"version":3,"sources":["images/not-found.svg","images/upload-file.svg","HighlightedText.js","PalindromesList.js","NotFound.js","FileLoader.js","utils/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","text","palindromes","highlightedText","useMemo","buf","map","item","replace","className","dangerouslySetInnerHTML","__html","isSearchLongest","longest","longestIdx","indexOf","reduce","a","b","length","i","key","src","notFound","title","alt","onLoad","ref","useRef","onClick","current","click","fileLoader","type","onChange","e","files","target","reader","FileReader","readAsText","onload","result","accept","checkWords","words","j","isPalindrome","push","checkPhrases","phraseBuf","join","checkSentences","sentenceBuf","string","preparedString","toLowerCase","App","useState","sourceText","setSourcetext","isSubmitted","setIsSubmitted","setPalindromes","onSourceTextChangeCallback","useCallback","value","onFindBtnClickCallback","_","rows","split","trim","Set","findPalindromes","onClearBtnClickCallback","FileLoader","name","disabled","HighlightedText","PalindromesList","NotFound","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b65608a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not-found.76758a29.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload-file.51638bd0.svg\";","import React, {useMemo} from 'react'\r\n\r\nexport default ({text, palindromes = []}) => {\r\n\r\n    //I did my best (\r\n    const highlightedText = useMemo(() => {\r\n        let buf = text\r\n        palindromes.map(item => {\r\n            //useless. In this case simple substring replace is enough\r\n            // buf = buf.replace(new RegExp(`(${item})`, 'gi'), `<span class='selected'>${item}</span>`)\r\n            buf = buf.replace(item, `<span class='selected'>${item}</span>`)\r\n            return item\r\n        })\r\n        return buf\r\n    }, [text, palindromes])\r\n\r\n    return <p className={'highlighted-text'} dangerouslySetInnerHTML={{__html: highlightedText}}/>\r\n}","import React, {useMemo} from 'react'\r\n\r\nexport default ({palindromes = [], isSearchLongest = false}) => {\r\n\r\n    const longest = useMemo(() => {\r\n        let longestIdx = null\r\n        if (isSearchLongest) {\r\n            longestIdx = palindromes.indexOf(palindromes.reduce((a, b) => a.length < b.length ? b : a, \"\"))\r\n        }\r\n        return longestIdx\r\n    }, [palindromes, isSearchLongest]);\r\n\r\n    return (\r\n        <ul className={'foundPalindromes'}>\r\n            {palindromes.map((item, i) => <li key={i}>\r\n                {item} {(null !== longest && longest === i) ? <span className={'longest'}>longest</span> : ''}\r\n            </li>)}\r\n        </ul>\r\n    )\r\n}","import React from 'react'\r\nimport notFound from './images/not-found.svg';\r\n\r\nexport default () => <><h2>Nothing found</h2><img src={notFound} title={\"not found\"} alt={\"not-found\"}/></>","import React, {useRef} from 'react'\r\nimport fileLoader from './images/upload-file.svg'\r\n\r\nexport default ({onLoad}) => {\r\n    const ref = useRef(null)\r\n\r\n    const onChange = e => {\r\n        const files = e.target.files\r\n        if (files.length > 0) {\r\n            var reader = new FileReader();\r\n            reader.readAsText(files[0], \"UTF-8\");\r\n            reader.onload = function (e) {\r\n                onLoad(e.target.result)\r\n            }\r\n        }\r\n    }\r\n    // Allow users to click on the hidden input.\r\n    const onClick = () => {\r\n        ref.current.click()\r\n    }\r\n\r\n\r\n    return <div onClick={onClick} className={\"file-loader-block\"}>\r\n        <img src={fileLoader} alt={\"choose file\"}/>\r\n        <input type={\"file\"} ref={ref} onChange={onChange} accept=\".txt\" className={'file-loader-input'}/>\r\n    </div>\r\n}","\r\n\r\nexport function findPalindromes(text) {\r\n    //split source text line by line\r\n    const rows = text.split('\\n');\r\n    let palindromes = []\r\n    for (let i = 0; i < rows.length; i++) {\r\n        const words = rows[i].trim().split(' ')\r\n        //if only one word in  whole text - just check it without extra loops\r\n        if (words.length === 1) {\r\n            palindromes = [...palindromes, ...checkWords(words)]\r\n        } else {\r\n            //Some problems with such implementation. Not optimized\r\n            palindromes = [...palindromes, ...checkPhrases(words), ...checkSentences(words), ...checkWords(words)]\r\n        }\r\n    }\r\n    //make array with distinct values\r\n    return [...new Set([...palindromes])]\r\n}\r\n\r\nfunction checkWords(words) {\r\n    let palindromes = []\r\n    for (let j = 0; j < words.length; j++) {\r\n        if (isPalindrome(words[j])) {\r\n            palindromes.push(words[j])\r\n        }\r\n    }\r\n    return palindromes\r\n}\r\n\r\nfunction checkPhrases(words) {\r\n    let phraseBuf = []\r\n    let palindromes = []\r\n\r\n    for (let j = 0; j < words.length; j++) {\r\n        phraseBuf.push(words[j])\r\n\r\n        if (isPalindrome(phraseBuf.join(\" \"))) {\r\n            palindromes.push(phraseBuf.join(\" \"))\r\n        } else {\r\n            phraseBuf = [words[j]]\r\n        }\r\n    }\r\n    return palindromes\r\n}\r\n\r\nfunction checkSentences(words) {\r\n    let sentenceBuf = []\r\n    let palindromes = []\r\n\r\n    for (let j = 0; j < words.length; j++) {\r\n        sentenceBuf.push(words[j])\r\n        if (isPalindrome(sentenceBuf.join(\" \"))) {\r\n            palindromes.push(sentenceBuf.join(\" \"))\r\n        }\r\n    }\r\n    return palindromes\r\n}\r\n\r\nfunction isPalindrome(string) {\r\n    //remove everything except of letters\r\n    const preparedString = string.replace(/[\\W_]/g, '').toLowerCase()\r\n    const length = preparedString.length\r\n\r\n    if (length < 3) {\r\n        return false\r\n    }\r\n    //Divide string to 2 part. Check from both parts. If letters are not equal - it`s not a palindrome\r\n    for (let i = 0; i < length / 2; i++) {\r\n        if (preparedString[i] !== preparedString[length - i - 1]) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}","import React, {useState, useCallback} from 'react'\nimport HighlightedText from './HighlightedText'\nimport PalindromesList from './PalindromesList'\nimport NotFound from './NotFound'\nimport FileLoader from './FileLoader'\nimport {findPalindromes} from \"./utils\"\nimport './App.css';\n\nfunction App() {\n    const [sourceText, setSourcetext] = useState('')\n    const [isSubmitted, setIsSubmitted] = useState(false)\n    const [palindromes, setPalindromes] = useState('')\n\n    //Use hooks just to check how does it work. Memoize handlers\n    const onSourceTextChangeCallback = useCallback(\n        (e) => {\n            setSourcetext(e.target.value)\n            // On change text we need to clear previously found palindromes\n            if (palindromes) {\n                setPalindromes('')\n                setIsSubmitted(false)\n            }\n        }, [palindromes])\n\n    const onFindBtnClickCallback = useCallback(\n        _ => {\n            setPalindromes(findPalindromes(sourceText))\n            setIsSubmitted(true)\n        }, [sourceText])\n\n    const onClearBtnClickCallback = useCallback(\n        _ => {\n            setSourcetext('')\n            setPalindromes('')\n            setIsSubmitted(false)\n        }, [])\n\n    return (\n        <div className=\"App\">\n            <section>\n                <aside className={palindromes ? \"block-active block-first\" : \"block-first\"}>\n                    <h2>1. Paste your text</h2>\n                    <div>\n                        <p>Choose file with text</p>\n                        <FileLoader onLoad={setSourcetext}/>\n                        <p>or paste your text into area</p>\n                        <textarea onChange={onSourceTextChangeCallback} name={\"sourceText\"} className={\"sourceText\"}\n                                  value={sourceText} />\n                    </div>\n                    <div className={'actions'}>\n                        <button className={!sourceText ? \"btn submit disabled\" : \"btn submit\"}\n                                onClick={onFindBtnClickCallback} type={\"button\"}\n                                disabled={!sourceText}>Find palindromes\n                        </button>\n                        {sourceText && (\n                            <button className={\"btn cancel\"} onClick={onClearBtnClickCallback} type={\"button\"}\n                                    disabled={!sourceText}>Clear</button>\n                        )}\n                    </div>\n                </aside>\n\n                {(isSubmitted && sourceText) && (\n                    <aside className={\"block-active block-second\"}>\n                        {palindromes.length > 0 ? (\n                            <div>\n                                <h2>2. Highlighted palindromes</h2>\n                                <HighlightedText text={sourceText} palindromes={palindromes}/>\n                                <h2><span>3.</span> Found palindromes </h2>\n                                <PalindromesList isSearchLongest={true} palindromes={palindromes}/>\n                            </div>\n                        ) : <NotFound/>}\n                    </aside>\n                )}\n            </section>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}